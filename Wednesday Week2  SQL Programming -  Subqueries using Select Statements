{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Wednesday Week2  SQL Programming -  Subqueries using Select Statements","provenance":[{"file_id":"1uZH9HDD66jriiIg1k4nmloOXK2H5mQcs","timestamp":1627453169059}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"v7SpgjvSlIoR"},"source":["<font color=\"green\">*To start working on this notebook, or any other notebook that we will use in the Moringa Data Science Course, we will need to save our own copy of it. We can do this by clicking File > Save a Copy in Drive. We will then be able to make edits to our own copy of this notebook.*</font>"]},{"cell_type":"markdown","metadata":{"id":"LtFx0bBdlL-n"},"source":["# SQL Programming - Subqueries using Select Statements"]},{"cell_type":"markdown","metadata":{"id":"mlCS9-zslSwf"},"source":["## 1.0 Connecting to our Database"]},{"cell_type":"code","metadata":{"id":"cEeocMxvnZwS","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1627453442361,"user_tz":-180,"elapsed":406,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"1f156cf2-77e6-45cc-c03f-16a63bb526f7"},"source":["# We will first load the sql extension into our environment\n","%load_ext sql\n","\n","# Then connect to our in memory sqlite database\n","# NB: This database will cease to exist as soon as the database connection is closed. \n","%sql sqlite://"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'Connected: @None'"]},"metadata":{"tags":[]},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"lLI1zQYqlVlt"},"source":["## 1.1 Loading Data from CSV Files"]},{"cell_type":"markdown","metadata":{"id":"tNUsWoeTWn_f"},"source":["Datasets used in this notebook:\n","\n","\n","1.   **World Countries**\n","\n","> ([Dataset Download Link](https://drive.google.com/a/moringaschool.com/file/d/1XlabneVWhvbmpRUi_Wix2FR5uYAAp-ZY/view?usp=sharing))\n","\n","2.   **World Cities** \n","\n","> ([Dataset Download Link](https://drive.google.com/a/moringaschool.com/file/d/1R5952m-8hH91uiwDK8dcL9sT2D_PEcuw/view?usp=sharing))\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"jryiwN6GiqoT","executionInfo":{"status":"ok","timestamp":1627453447401,"user_tz":-180,"elapsed":383,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}}},"source":["# Importing Pandas\n","import pandas as pd"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"gnuy0grfirgn","colab":{"base_uri":"https://localhost:8080/","height":216},"executionInfo":{"status":"ok","timestamp":1627456371761,"user_tz":-180,"elapsed":421,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"31bd5bba-4f7d-4e85-91f1-7a4f7d517c26"},"source":["# Loading our Countries dataset\n","# \n","with open('world_cities.csv','r') as f:\n","    Cities = pd.read_csv(f, index_col=0, encoding='utf-8')\n","%sql DROP TABLE if EXISTS Cities;\n","%sql PERSIST Cities;\n","%sql SELECT * FROM Cities LIMIT 5;"],"execution_count":3,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"," * sqlite://\n"," * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","            <th>country</th>\n","            <th>latitude</th>\n","            <th>longitude</th>\n","            <th>temperature</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Aalborg</td>\n","            <td>Denmark</td>\n","            <td>57.03</td>\n","            <td>9.92</td>\n","            <td>7.52</td>\n","        </tr>\n","        <tr>\n","            <td>Aberdeen</td>\n","            <td>United Kingdom</td>\n","            <td>57.17</td>\n","            <td>-2.08</td>\n","            <td>8.1</td>\n","        </tr>\n","        <tr>\n","            <td>Abisko</td>\n","            <td>Sweden</td>\n","            <td>63.35</td>\n","            <td>18.83</td>\n","            <td>0.2</td>\n","        </tr>\n","        <tr>\n","            <td>Adana</td>\n","            <td>Turkey</td>\n","            <td>36.99</td>\n","            <td>35.32</td>\n","            <td>18.67</td>\n","        </tr>\n","        <tr>\n","            <td>Albacete</td>\n","            <td>Spain</td>\n","            <td>39.0</td>\n","            <td>-1.87</td>\n","            <td>12.62</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Aalborg', 'Denmark', 57.03, 9.92, 7.52),\n"," ('Aberdeen', 'United Kingdom', 57.17, -2.08, 8.1),\n"," ('Abisko', 'Sweden', 63.35, 18.83, 0.2),\n"," ('Adana', 'Turkey', 36.99, 35.32, 18.67),\n"," ('Albacete', 'Spain', 39.0, -1.87, 12.62)]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"Nl8AVi1OyUmm","colab":{"base_uri":"https://localhost:8080/","height":216},"executionInfo":{"status":"ok","timestamp":1627456465425,"user_tz":-180,"elapsed":405,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"967601a6-f9ae-4b75-f1ae-460c65bf7193"},"source":["# Loading our cities dataset \n","# \n","with open('world_countries.csv','r') as f:\n","    Countries = pd.read_csv(f, index_col=0, encoding='utf-8')\n","%sql DROP TABLE if EXISTS Countries;\n","%sql PERSIST Countries;\n","%sql SELECT * FROM Countries LIMIT 5;"],"execution_count":4,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"," * sqlite://\n"," * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>country</th>\n","            <th>population</th>\n","            <th>EU</th>\n","            <th>coastline</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Albania</td>\n","            <td>2.9</td>\n","            <td>no</td>\n","            <td>yes</td>\n","        </tr>\n","        <tr>\n","            <td>Andorra</td>\n","            <td>0.07</td>\n","            <td>no</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Austria</td>\n","            <td>8.57</td>\n","            <td>yes</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Belarus</td>\n","            <td>9.48</td>\n","            <td>no</td>\n","            <td>no</td>\n","        </tr>\n","        <tr>\n","            <td>Belgium</td>\n","            <td>11.37</td>\n","            <td>yes</td>\n","            <td>yes</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Albania', 2.9, 'no', 'yes'),\n"," ('Andorra', 0.07, 'no', 'no'),\n"," ('Austria', 8.57, 'yes', 'no'),\n"," ('Belarus', 9.48, 'no', 'no'),\n"," ('Belgium', 11.37, 'yes', 'yes')]"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"LEAwY5fwleiu"},"source":["## 1.2 Subqueries using the SELECT statement"]},{"cell_type":"markdown","metadata":{"id":"xgcGBkvuA3V0"},"source":["A subquery is a query within another query. The outer query is called as main query and inner query is called as subquery. The subquery must be enclosed with parenthesis and generally executes first, and its output is used to complete the query condition for the main or outer query. We will go through examples of how subqueries can be used to answers different types of questions then later, we will use our learnings to work on the challenges."]},{"cell_type":"code","metadata":{"id":"--LbGFNOnbTx","colab":{"base_uri":"https://localhost:8080/","height":179},"executionInfo":{"status":"ok","timestamp":1627456546031,"user_tz":-180,"elapsed":377,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"ccdfe60d-e1ff-45fc-9d1d-a0ae00440fa7"},"source":["# Example 1\n","# Subqueries can occur in the select list of the containing query\n","# as shown below;\n","# Let's find all countries in the Countries table with no city in the Cities table\n","# \n","%%sql\n","SELECT country\n","FROM Countries\n","WHERE NOT EXISTS (SELECT * FROM Cities\n","                  WHERE Cities.country = Countries.country) \n"],"execution_count":5,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>country</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Cyprus</td>\n","        </tr>\n","        <tr>\n","            <td>Iceland</td>\n","        </tr>\n","        <tr>\n","            <td>Kosovo</td>\n","        </tr>\n","        <tr>\n","            <td>Liechtenstein</td>\n","        </tr>\n","        <tr>\n","            <td>Luxembourg</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Cyprus',), ('Iceland',), ('Kosovo',), ('Liechtenstein',), ('Luxembourg',)]"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"8XqiW-Q8ndKT","colab":{"base_uri":"https://localhost:8080/","height":158},"executionInfo":{"status":"ok","timestamp":1627457041202,"user_tz":-180,"elapsed":371,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"ed14ee02-39c2-411c-d893-e1178fa3f139"},"source":["# Example 2\n","# Find the European countries with cities experiencing temperature > 20?\n","# \n","%%sql\n","SELECT country\n","FROM Countries\n","WHERE EU = 'yes'\n","AND EXISTS (SELECT * FROM Cities\n","            WHERE Cities.country = Countries.country\n","            AND temperature > 15)"],"execution_count":6,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>country</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Greece</td>\n","        </tr>\n","        <tr>\n","            <td>Italy</td>\n","        </tr>\n","        <tr>\n","            <td>Portugal</td>\n","        </tr>\n","        <tr>\n","            <td>Spain</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Greece',), ('Italy',), ('Portugal',), ('Spain',)]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"ocuJ_kB4nd3z","colab":{"base_uri":"https://localhost:8080/","height":90},"executionInfo":{"status":"ok","timestamp":1627457065664,"user_tz":-180,"elapsed":381,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"f32f987e-e110-4dfe-9596-7f912bb30a45"},"source":["# Example 3: Method 1\n","# Find the westernmost city, returning the city and longitude\n","# \n","%%sql\n","SELECT city, longitude\n","FROM Cities C1\n","WHERE NOT EXISTS (SELECT * FROM Cities C2\n","                  WHERE C2.longitude < C1.longitude)"],"execution_count":7,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","            <th>longitude</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Lisbon</td>\n","            <td>-9.14</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Lisbon', -9.14)]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"MQCaPcMQ5pDl","colab":{"base_uri":"https://localhost:8080/","height":90},"executionInfo":{"status":"ok","timestamp":1627457115923,"user_tz":-180,"elapsed":420,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"08a6450d-b12b-493f-8166-322b06d8b437"},"source":["# Example 3: Method 2\n","# Find the westernmost city, returning the city and longitude\n","# \n","%%sql\n","SELECT city, longitude\n","FROM Cities\n","WHERE longitude = (SELECT min(longitude) FROM Cities)"],"execution_count":8,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","            <th>longitude</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Lisbon</td>\n","            <td>-9.14</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Lisbon', -9.14)]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"KL5VFl2x7kLZ","colab":{"base_uri":"https://localhost:8080/","height":90},"executionInfo":{"status":"ok","timestamp":1627457120416,"user_tz":-180,"elapsed":433,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"9819a10a-913c-4a94-d448-79eb2fe16839"},"source":["# Example 4:\n","# How many cities are in the EU?\n","# \n","%%sql\n","SELECT count()\n","FROM Cities\n","WHERE country IN (SELECT country FROM Countries WHERE EU = 'yes')"],"execution_count":9,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>count()</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>150</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[(150,)]"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"d1czA9cCnfki"},"source":["### <font color=\"green\">1.2 Challenges</font>"]},{"cell_type":"code","metadata":{"id":"BpOpH-fznpo2","colab":{"base_uri":"https://localhost:8080/","height":90},"executionInfo":{"status":"ok","timestamp":1627479947938,"user_tz":-180,"elapsed":379,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"b0b73ebf-772d-4252-da1f-668abf49a9f9"},"source":["# Challenge 1\n","# Find number of countries that have a city with latitude > 40 (start with country list)\n","# \n","%%sql\n","SELECT COUNT(country)\n","FROM Countries\n","WHERE EXISTS (SELECT country FROM Cities WHERE Countries.country = Cities.country AND latitude > 10)\n","\n"],"execution_count":115,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>COUNT(country)</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>37</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[(37,)]"]},"metadata":{"tags":[]},"execution_count":115}]},{"cell_type":"code","metadata":{"id":"jIhUfWXlnrcK","colab":{"base_uri":"https://localhost:8080/","height":128},"executionInfo":{"status":"ok","timestamp":1627473360283,"user_tz":-180,"elapsed":584,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"49e6469e-579a-4e7d-ac20-d4f662b9fa2b"},"source":["# Challenge 2\n","# Find three western most cities returning both the cities and their longitude\n","#\n","%%sql\n","SELECT city, longitude FROM Cities\n","WHERE EXISTS (SELECT longitude FROM Cities WHERE longitude < 0)\n","ORDER BY longitude ASC \n","LIMIT 3;"],"execution_count":67,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","            <th>longitude</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Lisbon</td>\n","            <td>-9.14</td>\n","        </tr>\n","        <tr>\n","            <td>Galway</td>\n","            <td>-9.05</td>\n","        </tr>\n","        <tr>\n","            <td>Vigo</td>\n","            <td>-8.73</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Lisbon', -9.14), ('Galway', -9.05), ('Vigo', -8.73)]"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"o0ACgdPAnvrF","colab":{"base_uri":"https://localhost:8080/","height":577},"executionInfo":{"status":"ok","timestamp":1627472945901,"user_tz":-180,"elapsed":470,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"612a26fb-bbb8-4809-ab92-553146925407"},"source":["# Challenge 3\n","# Find cities with temperature is more than 50% higher than the average; \n","# We will return the city, country, and temperature, ordered by descending temperature\n","# Hint: avg(temperature) * 1.5\n","# \n","%%sql\n","SELECT city, country, temperature FROM Cities\n","WHERE temperature > (SELECT AVG(temperature) * 1.5 FROM Cities)\n","ORDER BY temperature DESC"],"execution_count":61,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","            <th>country</th>\n","            <th>temperature</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Adana</td>\n","            <td>Turkey</td>\n","            <td>18.67</td>\n","        </tr>\n","        <tr>\n","            <td>Palermo</td>\n","            <td>Italy</td>\n","            <td>17.9</td>\n","        </tr>\n","        <tr>\n","            <td>Athens</td>\n","            <td>Greece</td>\n","            <td>17.41</td>\n","        </tr>\n","        <tr>\n","            <td>Algeciras</td>\n","            <td>Spain</td>\n","            <td>17.38</td>\n","        </tr>\n","        <tr>\n","            <td>Cartagena</td>\n","            <td>Spain</td>\n","            <td>17.32</td>\n","        </tr>\n","        <tr>\n","            <td>Kalamata</td>\n","            <td>Greece</td>\n","            <td>17.3</td>\n","        </tr>\n","        <tr>\n","            <td>Marbella</td>\n","            <td>Spain</td>\n","            <td>17.19</td>\n","        </tr>\n","        <tr>\n","            <td>Huelva</td>\n","            <td>Spain</td>\n","            <td>17.09</td>\n","        </tr>\n","        <tr>\n","            <td>Patras</td>\n","            <td>Greece</td>\n","            <td>16.9</td>\n","        </tr>\n","        <tr>\n","            <td>Cosenza</td>\n","            <td>Italy</td>\n","            <td>16.6</td>\n","        </tr>\n","        <tr>\n","            <td>Messina</td>\n","            <td>Italy</td>\n","            <td>16.54</td>\n","        </tr>\n","        <tr>\n","            <td>Granada</td>\n","            <td>Spain</td>\n","            <td>16.33</td>\n","        </tr>\n","        <tr>\n","            <td>Valencia</td>\n","            <td>Spain</td>\n","            <td>16.02</td>\n","        </tr>\n","        <tr>\n","            <td>Trikala</td>\n","            <td>Greece</td>\n","            <td>16.0</td>\n","        </tr>\n","        <tr>\n","            <td>Barcelona</td>\n","            <td>Spain</td>\n","            <td>15.78</td>\n","        </tr>\n","        <tr>\n","            <td>Badajoz</td>\n","            <td>Spain</td>\n","            <td>15.61</td>\n","        </tr>\n","        <tr>\n","            <td>Lisbon</td>\n","            <td>Portugal</td>\n","            <td>15.52</td>\n","        </tr>\n","        <tr>\n","            <td>Elbasan</td>\n","            <td>Albania</td>\n","            <td>15.18</td>\n","        </tr>\n","        <tr>\n","            <td>Bari</td>\n","            <td>Italy</td>\n","            <td>15.15</td>\n","        </tr>\n","        <tr>\n","            <td>Pescara</td>\n","            <td>Italy</td>\n","            <td>15.13</td>\n","        </tr>\n","        <tr>\n","            <td>Manisa</td>\n","            <td>Turkey</td>\n","            <td>15.1</td>\n","        </tr>\n","        <tr>\n","            <td>Rome</td>\n","            <td>Italy</td>\n","            <td>15.1</td>\n","        </tr>\n","        <tr>\n","            <td>Catania</td>\n","            <td>Italy</td>\n","            <td>15.04</td>\n","        </tr>\n","        <tr>\n","            <td>Denizli</td>\n","            <td>Turkey</td>\n","            <td>15.02</td>\n","        </tr>\n","        <tr>\n","            <td>Murcia</td>\n","            <td>Spain</td>\n","            <td>15.0</td>\n","        </tr>\n","        <tr>\n","            <td>Marseille</td>\n","            <td>France</td>\n","            <td>14.98</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Adana', 'Turkey', 18.67),\n"," ('Palermo', 'Italy', 17.9),\n"," ('Athens', 'Greece', 17.41),\n"," ('Algeciras', 'Spain', 17.38),\n"," ('Cartagena', 'Spain', 17.32),\n"," ('Kalamata', 'Greece', 17.3),\n"," ('Marbella', 'Spain', 17.19),\n"," ('Huelva', 'Spain', 17.09),\n"," ('Patras', 'Greece', 16.9),\n"," ('Cosenza', 'Italy', 16.6),\n"," ('Messina', 'Italy', 16.54),\n"," ('Granada', 'Spain', 16.33),\n"," ('Valencia', 'Spain', 16.02),\n"," ('Trikala', 'Greece', 16.0),\n"," ('Barcelona', 'Spain', 15.78),\n"," ('Badajoz', 'Spain', 15.61),\n"," ('Lisbon', 'Portugal', 15.52),\n"," ('Elbasan', 'Albania', 15.18),\n"," ('Bari', 'Italy', 15.15),\n"," ('Pescara', 'Italy', 15.13),\n"," ('Manisa', 'Turkey', 15.1),\n"," ('Rome', 'Italy', 15.1),\n"," ('Catania', 'Italy', 15.04),\n"," ('Denizli', 'Turkey', 15.02),\n"," ('Murcia', 'Spain', 15.0),\n"," ('Marseille', 'France', 14.98)]"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"fmUqjv6F6lQ0","colab":{"base_uri":"https://localhost:8080/","height":90},"executionInfo":{"status":"ok","timestamp":1627475296399,"user_tz":-180,"elapsed":434,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"ec6c984a-a783-4608-e2da-e04b06b7d6b2"},"source":["# Challenge 4\n","# How many cities are not in the EU and without a coastline?\n","# Hint: \"not in\"\n","# \n","%%sql\n","SELECT COUNT(city) FROM Cities \n","WHERE country IN (SELECT country FROM Countries WHERE EU = 'no' AND coastline = 'no')"],"execution_count":83,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>COUNT(city)</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>16</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[(16,)]"]},"metadata":{"tags":[]},"execution_count":83}]},{"cell_type":"code","metadata":{"id":"x14dNNSB8X9_","colab":{"base_uri":"https://localhost:8080/","height":90},"executionInfo":{"status":"ok","timestamp":1627478112256,"user_tz":-180,"elapsed":730,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"c45f6b9a-fd76-4435-803c-fab5c9497860"},"source":["# Challenge 5\n","# Find the number of countries with no coastline and a city with longitude < 10\n","# \n","%%sql\n","SELECT COUNT(country) FROM Countries\n","WHERE coastline = 'no' AND (country IN (SELECT country FROM Cities WHERE city IN (SELECT city FROM Cities WHERE longitude < 10)))"],"execution_count":102,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>COUNT(country)</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>3</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[(3,)]"]},"metadata":{"tags":[]},"execution_count":102}]},{"cell_type":"code","metadata":{"id":"Z_AeMRdD82F8","colab":{"base_uri":"https://localhost:8080/","height":167},"executionInfo":{"status":"ok","timestamp":1627478477212,"user_tz":-180,"elapsed":451,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"3602c1a4-f223-4096-878f-817d89d70dc9"},"source":["# Challenge 6\n","# Find countries in Countries table with no city in Cities table\n","# \n","\n","%%sql\n","SELECT country\n","FROM Countries\n","WHERE NOT EXISTS (SELECT country FROM Cities WHERE Countries.country = Cities.country)"],"execution_count":109,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>country</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Cyprus</td>\n","        </tr>\n","        <tr>\n","            <td>Iceland</td>\n","        </tr>\n","        <tr>\n","            <td>Kosovo</td>\n","        </tr>\n","        <tr>\n","            <td>Liechtenstein</td>\n","        </tr>\n","        <tr>\n","            <td>Luxembourg</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Cyprus',), ('Iceland',), ('Kosovo',), ('Liechtenstein',), ('Luxembourg',)]"]},"metadata":{"tags":[]},"execution_count":109}]},{"cell_type":"code","metadata":{"id":"4dW5nRzi9atc","colab":{"base_uri":"https://localhost:8080/","height":187},"executionInfo":{"status":"ok","timestamp":1627478830538,"user_tz":-180,"elapsed":1188,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"70ccbf39-3b00-4b36-eabe-ba92886c6f1f"},"source":["# Challenge 7\n","# Find all cities in a country whose population is < 2, returning the city and country.\n","# \n","%%sql\n","SELECT city, country FROM cities \n","WHERE country IN (SELECT country FROM Countries WHERE population < 2)"],"execution_count":112,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>city</th>\n","            <th>country</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Andorra</td>\n","            <td>Andorra</td>\n","        </tr>\n","        <tr>\n","            <td>Daugavpils</td>\n","            <td>Latvia</td>\n","        </tr>\n","        <tr>\n","            <td>Podgorica</td>\n","            <td>Montenegro</td>\n","        </tr>\n","        <tr>\n","            <td>Riga</td>\n","            <td>Latvia</td>\n","        </tr>\n","        <tr>\n","            <td>Tallinn</td>\n","            <td>Estonia</td>\n","        </tr>\n","        <tr>\n","            <td>Tartu</td>\n","            <td>Estonia</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Andorra', 'Andorra'),\n"," ('Daugavpils', 'Latvia'),\n"," ('Podgorica', 'Montenegro'),\n"," ('Riga', 'Latvia'),\n"," ('Tallinn', 'Estonia'),\n"," ('Tartu', 'Estonia')]"]},"metadata":{"tags":[]},"execution_count":112}]},{"cell_type":"code","metadata":{"id":"rZCO_07d9n9G","colab":{"base_uri":"https://localhost:8080/","height":246},"executionInfo":{"status":"ok","timestamp":1627480197117,"user_tz":-180,"elapsed":378,"user":{"displayName":"Glendah Nyabuto","photoUrl":"","userId":"13518372990193539991"}},"outputId":"3d864a4e-e45d-4607-9150-fb7367c8c895"},"source":["# Challenge 8\n","# Find all countries with no city having a temperature > 6\n","# \n","%%sql\n","SELECT country FROM Countries\n","WHERE NOT EXISTS (SELECT country FROM Cities WHERE Countries.country = Cities.country AND temperature > 6) \n"],"execution_count":118,"outputs":[{"output_type":"stream","text":[" * sqlite://\n","Done.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<table>\n","    <thead>\n","        <tr>\n","            <th>country</th>\n","        </tr>\n","    </thead>\n","    <tbody>\n","        <tr>\n","            <td>Cyprus</td>\n","        </tr>\n","        <tr>\n","            <td>Estonia</td>\n","        </tr>\n","        <tr>\n","            <td>Finland</td>\n","        </tr>\n","        <tr>\n","            <td>Iceland</td>\n","        </tr>\n","        <tr>\n","            <td>Kosovo</td>\n","        </tr>\n","        <tr>\n","            <td>Latvia</td>\n","        </tr>\n","        <tr>\n","            <td>Liechtenstein</td>\n","        </tr>\n","        <tr>\n","            <td>Luxembourg</td>\n","        </tr>\n","        <tr>\n","            <td>Norway</td>\n","        </tr>\n","    </tbody>\n","</table>"],"text/plain":["[('Cyprus',),\n"," ('Estonia',),\n"," ('Finland',),\n"," ('Iceland',),\n"," ('Kosovo',),\n"," ('Latvia',),\n"," ('Liechtenstein',),\n"," ('Luxembourg',),\n"," ('Norway',)]"]},"metadata":{"tags":[]},"execution_count":118}]},{"cell_type":"code","metadata":{"id":"317YqHHaV26K"},"source":[""],"execution_count":null,"outputs":[]}]}